{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAaC,SAASC,cAAc,uBACpCC,EAAYF,SAASC,cAAc,sBACnCE,EAAcH,SAASC,cAAc,wBACrCG,EAAUJ,SAASC,cAAc,SAEvC,IAAII,EAAa,EACbC,EAAO,EACPC,EAAS,EAEbR,EAAWS,iBAAiB,SAK5B,SAA0BC,GACxB,OAAOJ,EAAaK,OAAOD,EAAEE,OAAOC,UALtCV,EAAUM,iBAAiB,SAQ3B,SAA0BC,GACxB,OAAOH,EAAOI,OAAOD,EAAEE,OAAOC,UARhCT,EAAYK,iBAAiB,SAW7B,SAA4BC,GAC1B,OAAOF,EAASG,OAAOD,EAAEE,OAAOC,UAXlCR,EAAQI,iBAAiB,UAezB,SAAwBC,GACtBA,EAAEI,iBAIJ,SAA2BC,EAAUC,GAEnC,IAAIC,EAAaX,EAEjB,IAAK,IAAIY,EAAI,EAAGA,EAAIH,EAAUG,GAAK,EAAE,CAEnC,IAAIC,EAAQD,EAAI,EACZE,EAAaH,EAED,IAAII,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACaC,KAAKC,SAAW,IAEpCC,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAqBV,QAAcC,OACzDE,EAAM,uBAAqBH,QAAcC,SAI3CO,EAAA7B,GAAS8B,OAAOE,QAAQ,sBAAoBX,QAAcC,OACxDG,EAAK,sBAAoBJ,QAAYC,UAExCH,MAIFc,MAAKlB,IACRmB,QAAQC,IAAIpB,MAETqB,OAAMC,IACLH,QAAQC,IAAIE,MAGhBlB,GAAcD,GAnChBoB,CAAkB5B,EAAOD","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\nconst btnForm = document.querySelector('.form');\n\nlet firstDelay = 0;\nlet step = 0;\nlet amount = 0;\n\ninputDelay.addEventListener('input', valuOfInputDalay);\ninputStep.addEventListener('input', valueOfInputStep);\ninputAmount.addEventListener('input', valueOfInputAmount);\nbtnForm.addEventListener('submit', createPromises);\n\nfunction valuOfInputDalay(e) {\n  return firstDelay = Number(e.target.value);\n};\n\nfunction valueOfInputStep(e) {\n  return step = Number(e.target.value);\n};\n\nfunction valueOfInputAmount(e) {\n  return amount = Number(e.target.value);\n};\n\n\nfunction createPromises(e) {\n  e.preventDefault();\n  createAllPromises(amount,step)\n};\n\nfunction createAllPromises(position, delay) {\n  \n  let startDelay = firstDelay;\n  \n  for (let i = 0; i < position; i += 1){\n    \n    let count = i + 1;\n    let countDelay = startDelay\n\n    const promise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${count} in ${countDelay}ms`);\n          resolve(`✅ Fulfilled promise ${count} in ${countDelay}ms`);\n        }\n        else {\n           \n          Notiflix.Notify.failure(`❌ Rejected promise ${count} in ${countDelay}ms`)\n          reject(`❌ Rejected promise ${count} in ${countDelay}ms`);\n        }\n      }, startDelay)\n    });\n\n    promise\n      .then(value => {\n    console.log(value);\n    })\n      .catch(error => {\n        console.log(error);\n      });\n    \n    startDelay += delay;\n  }\n}\n\n\n\n\n\n\n\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$inputDelay","document","querySelector","$47d4ff9957288465$var$inputStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$btnForm","$47d4ff9957288465$var$firstDelay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","addEventListener","e","Number","target","value","preventDefault","position","delay","startDelay","i","count","countDelay","Promise","resolve","reject","setTimeout","Math","random","$parcel$interopDefault","Notify","success","failure","then","console","log","catch","error","$47d4ff9957288465$var$createAllPromises"],"version":3,"file":"03-promises.f5550d66.js.map"}